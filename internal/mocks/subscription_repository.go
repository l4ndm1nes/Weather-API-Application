// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	model "github.com/l4ndm1nes/Weather-API-Application/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// SubscriptionRepository is an autogenerated mock type for the SubscriptionRepository type
type SubscriptionRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: sub
func (_m *SubscriptionRepository) Create(sub *model.Subscription) error {
	ret := _m.Called(sub)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Subscription) error); ok {
		r0 = rf(sub)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByEmail provides a mock function with given fields: email
func (_m *SubscriptionRepository) FindByEmail(email string) (*model.Subscription, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for FindByEmail")
	}

	var r0 *model.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Subscription, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Subscription); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllConfirmed provides a mock function with no fields
func (_m *SubscriptionRepository) GetAllConfirmed() ([]*model.Subscription, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllConfirmed")
	}

	var r0 []*model.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*model.Subscription, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*model.Subscription); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByToken provides a mock function with given fields: token
func (_m *SubscriptionRepository) GetByToken(token string) (*model.Subscription, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for GetByToken")
	}

	var r0 *model.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Subscription, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Subscription); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnsubscribeByToken provides a mock function with given fields: token
func (_m *SubscriptionRepository) UnsubscribeByToken(token string) error {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for UnsubscribeByToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: sub
func (_m *SubscriptionRepository) Update(sub *model.Subscription) error {
	ret := _m.Called(sub)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Subscription) error); ok {
		r0 = rf(sub)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSubscriptionRepository creates a new instance of SubscriptionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSubscriptionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *SubscriptionRepository {
	mock := &SubscriptionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
