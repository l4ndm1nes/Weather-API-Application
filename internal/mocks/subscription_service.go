// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	model "github.com/l4ndm1nes/Weather-API-Application/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// SubscriptionService is an autogenerated mock type for the SubscriptionService type
type SubscriptionService struct {
	mock.Mock
}

// ConfirmSubscription provides a mock function with given fields: token
func (_m *SubscriptionService) ConfirmSubscription(token string) error {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for ConfirmSubscription")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Subscribe provides a mock function with given fields: sub
func (_m *SubscriptionService) Subscribe(sub *model.Subscription) (*model.Subscription, error) {
	ret := _m.Called(sub)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 *model.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Subscription) (*model.Subscription, error)); ok {
		return rf(sub)
	}
	if rf, ok := ret.Get(0).(func(*model.Subscription) *model.Subscription); ok {
		r0 = rf(sub)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Subscription) error); ok {
		r1 = rf(sub)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Unsubscribe provides a mock function with given fields: token
func (_m *SubscriptionService) Unsubscribe(token string) error {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for Unsubscribe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSubscriptionService creates a new instance of SubscriptionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSubscriptionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *SubscriptionService {
	mock := &SubscriptionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
