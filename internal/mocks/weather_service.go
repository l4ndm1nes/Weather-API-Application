// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	model "github.com/l4ndm1nes/Weather-API-Application/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// WeatherService is an autogenerated mock type for the WeatherService type
type WeatherService struct {
	mock.Mock
}

// GetWeather provides a mock function with given fields: city
func (_m *WeatherService) GetWeather(city string) (*model.Weather, error) {
	ret := _m.Called(city)

	if len(ret) == 0 {
		panic("no return value specified for GetWeather")
	}

	var r0 *model.Weather
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Weather, error)); ok {
		return rf(city)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Weather); ok {
		r0 = rf(city)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Weather)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(city)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewWeatherService creates a new instance of WeatherService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWeatherService(t interface {
	mock.TestingT
	Cleanup(func())
}) *WeatherService {
	mock := &WeatherService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
